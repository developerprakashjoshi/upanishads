version: '3'
services:
  app:
    build:
      context: ./server-app
      dockerfile: Dockerfile
    volumes:
      - ./server-app:/var/www/html
    ports:
      - "9000:9000"
    depends_on:
      - db
    networks:
      - external
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: upanishads
      MYSQL_DATABASE: upanishads_db
      MYSQL_USER: rkm
      MYSQL_PASSWORD: rkm@2020
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - external
  phpmyadmin:
    depends_on:
      - db
    image: arm32v7/phpmyadmin
    ports:
      - 4001:80
    environment:
      - PMA_HOST:db
      - PMA_PORT:3306
    volumes:
      - ./config/config.inc.php:/etc/phpmyadmin/config.inc.php
      - ./config/000-default.conf:/etc/apache2/sites-available/000-default.conf
    networks:
      - external
  web:
    image: nginx:latest
    ports:
      - "4000:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - external
  development:
    build:
      context: ./client-app
      dockerfile: Dockerfile
      target: development # Specify the build target for development
    ports:
      - "3000:3000"
    volumes:
      - ./client-app:/app # Mount your Next.js app source code into the container
    environment:
      - NODE_ENV=development # Set the Node.js environment to development
  production:
    build:
      context: ./client-app
      dockerfile: Dockerfile
      target: serve-production # Specify the build target for production
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production # Set the Node.js environment to production
volumes:
  mysql_data:
networks:
  external:
    driver: bridge
